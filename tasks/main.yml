---
- name: Ensure dependencies are installed
  package:
    name: "{{ item }}"
    update_cache: "{{ php_apt_cache_update }}"
    state: present
  loop: "{{ php_packages_extra }}"

- name: Ensure PHP packages are installed
  package:
    name: "{{ item }}"
    update_cache: "{{ php_apt_cache_update }}"
    state: "{{ php_packages_state }}"
  loop: "{{ php_packages }}"
  notify:
    - php_webserver_restart

- name: Install PECL libaries
  shell: "yes '' | {{ php_pecl_executable }} install {{ item }}"
  loop: "{{ php_pecl_modules }}"
  register: pecl_result
  changed_when: "pecl_result.rc == 0"
  failed_when: "not (('already installed' in pecl_result.stdout) or ('install ok:' in pecl_result.stdout))"

- name: Enable modules installed with pecl
  template:
    src: mod.ini.j2
    dest: "{{ item.0 }}/{{ item.1 }}.ini"
    owner: root
    group: root
    force: yes
    mode: 0644
  loop: "{{ php_extension_conf_paths | zip(php_pecl_modules_enabled) | list }}"
  loop_control:
    label: "{{ item.0 }}/{{ item.1 }}.ini"
  notify:
    - php_webserver_restart

- name: Ensure configuration directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    follow: yes
  loop: "{{ php_conf_paths + php_extension_conf_paths | flatten }}"

- name: Place PHP configuration file in place
  template:
    src: php.ini.j2
    dest: "{{ item }}/php.ini"
    owner: root
    group: root
    mode: 0644
  loop: "{{ php_conf_paths }}"
  notify:
    - php_webserver_restart

- block:
    - name: Check for existing APCu config files
      find:
        paths: "{{ item }}"
        contains: 'extension(\s+)?=(\s+)?apc[u]?\.so'
      register: php_installed_apc_confs
      loop: "{{ php_extension_conf_paths }}"

    - name: Remove any non-role-supplied APCu config files
      file:
        path: "{{ item.1.path }}"
        state: absent
      when: php_apc_conf_filename != (item.1.path.split('/') | last)
      loop: "{{ php_installed_apc_confs.results | subelements('files') }}"
      loop_control:
        label: "{{ item.1.path }}"
      notify:
        - php_webserver_restart

    - name: Ensure APCu config file is present
      template:
        src: apc.ini.j2
        dest: "{{ item }}/{{ php_apc_conf_filename }}"
        owner: root
        group: root
        force: yes
        mode: 0644
      loop: "{{ php_extension_conf_paths }}"
      loop_control:
        label: "{{ item }}/{{ php_apc_conf_filename }}"
      notify:
        - php_webserver_restart
  when: php_apc_enabled | bool

- name: Remove APCu config file if APC is disabled
  file:
    path: "{{ item }}/{{ php_apc_conf_filename }}"
    state: absent
  loop: "{{ php_extension_conf_paths }}"
  loop_control:
    label: "{{ item }}/{{ php_apc_conf_filename }}"
  when: not php_apc_enabled | bool
  notify:
    - php_webserver_restart

- block:
    - name: Check for existing OpCache config files
      find:
        paths: "{{ item }}"
        contains: 'zend_extension(\s+)?=(\s+)?opcache\.so'
      register: php_installed_opcache_confs
      loop: "{{ php_extension_conf_paths }}"

    - name: Remove any non-role-supplied OpCache config files
      file:
        path: "{{ item.1.path }}"
        state: absent
      when: php_opcache_conf_filename != (item.1.path.split('/') | last)
      loop: "{{ php_installed_opcache_confs.results | subelements('files') }}"
      loop_control:
        label: "{{ item.1.path }}"
      notify:
        - php_webserver_restart

    - name: Ensure OpCache config file is present
      template:
        src: opcache.ini.j2
        dest: "{{ item }}/{{ php_opcache_conf_filename }}"
        owner: root
        group: root
        force: yes
        mode: 0644
      loop: "{{ php_extension_conf_paths }}"
      loop_control:
        label: "{{ item }}/{{ php_opcache_conf_filename }}"
      notify:
        - php_webserver_restart
  when: php_opcache_enabled | bool